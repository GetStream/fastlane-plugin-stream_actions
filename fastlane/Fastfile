skip_docs

lane :release do
  code_review
  sh('bundle exec rake build')
  gem_path = "pkg/fastlane-plugin-stream_actions-#{version}.gem"
  sh("gem push ../#{gem_path}")
  set_github_release(
    repository_name: 'GetStream/fastlane-plugin-stream_actions',
    api_token: ENV["GITHUB_TOKEN"],
    name: "Stream Actions v#{version}",
    tag_name: "v#{version}",
    description: "v#{version}",
    commitish: git_branch,
    upload_assets: [gem_path]
  )
end

lane :code_review do
  sh('bundle exec rake')
end

lane :sonar_upload do
  update_simplecov_report
  sonar_options =
    if ENV['GITHUB_EVENT_NAME'] == 'pull_request'
      {
        sonar_login: ENV['SONAR_TOKEN'],
        pull_request_branch: ENV['GITHUB_HEAD_REF'],
        pull_request_base: ENV['GITHUB_BASE_REF'],
        pull_request_key: ENV['PR_NUMBER']
      }
    else
      {
        sonar_login: ENV['SONAR_TOKEN'],
        branch_name: ENV['BRANCH_NAME'] || git_branch,
        project_version: version
      }
    end

  sonar(sonar_options)
end

private_lane :update_simplecov_report do
  coverage = JSON.parse(File.read('../coverage/.resultset.json'))["RSpec"]["coverage"]
  transformed_values = coverage.transform_values { |l| l["lines"] }
  new_format = { "RSpec" => { "coverage" => transformed_values, "timestamp" => Time.now.to_i } }
  File.open('../coverage/.sonar.json', 'w') { |f| f.write(JSON.pretty_generate(new_format)) }
end

def version
  version_path = '../lib/fastlane/plugin/stream_actions/version.rb'
  File.read(version_path).scan(/\d+/).join('.')
end
